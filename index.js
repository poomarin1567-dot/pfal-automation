const express = require('express');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const pool = require('./db');
const path = require('path');
const delay = ms => new Promise(resolve => setTimeout(resolve, ms)); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
require('dotenv').config();

const mqtt = require('mqtt');  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

// ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MQTT Server
const mqttClient = mqtt.connect("mqtt://automate.cat-smartgrow.com", {
  username: "test_01",
  password: "Test01!"
});




const app = express();
app.use(cors());
app.use(express.json());

// ‚úÖ Serve frontend files
app.use(express.static(path.join(__dirname)));

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});


// ‚úÖ Logging Activity Function
async function logActivity({ userId, activity, action_type, category = null, station = null, floor = null, slot = null, veg_type = null, description = null }) {
  try {
    await pool.query(`
      INSERT INTO logs (user_id, activity, action_type, category, station, floor, slot, veg_type, description)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
    `, [userId, activity, action_type, category, station, floor, slot, veg_type, description]);

    console.log("üìò Log saved:", activity);
  } catch (err) {
    console.error("‚ùå Logging failed:", err.message);
  }
}



// ‚úÖ REGISTER
app.post('/api/register', async (req, res) => {
  const { username, password, role } = req.body;
  console.log("\uD83D\uDCE8 register request", username, role);

  if (!username || !password || !role) {
    return res.status(400).json({ error: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö' });
  }

  try {
    const check = await pool.query("SELECT * FROM users WHERE username = $1", [username]);
    if (check.rows.length > 0) {
      console.log("‚ö†Ô∏è Username already exists:", username);
      return res.status(409).json({ error: "Username ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const result = await pool.query(
      "INSERT INTO users (username, password_hash, role, created_at) VALUES ($1, $2, $3, NOW()) RETURNING *",
      [username, hashedPassword, role]
    );

    console.log("‚úÖ Inserted user:", result.rows[0]);

    res.json({ message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user: result.rows[0] });
  } catch (err) {
    console.error("‚ùå Register error:", err);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
});


// ‚úÖ LOGIN
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;
  console.log("\uD83D\uDD10 login request", username);

  try {
    const result = await pool.query('SELECT * FROM users WHERE username = $1', [username]);
    const user = result.rows[0];

    if (!user) {
      return res.status(400).json({ error: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    const isMatch = await bcrypt.compare(password, user.password_hash);
    if (!isMatch) {
      return res.status(401).json({ error: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    console.log("‚úÖ Login success for:", user.username);

 await logActivity({
  userId: user.id,
  activity: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
  action_type: 'login',
  category: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
  description: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'  // ‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
});



    res.json({
      id: user.id,
      username: user.username,
      role: user.role,
      created_at: user.created_at
    });
  } catch (err) {
    console.error('‚ùå Login Error:', err.message);
    res.status(500).send('Server error');
  }
});

// ‚úÖ‚úÖ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î] TRAY INBOUND API ‚öôÔ∏è
app.post('/api/tray/inbound', async (req, res) => {
  const { 
    username, station, floor, slot, veg_type, quantity, 
    batch_id, seeding_date, notes, tray_id: existing_tray_id 
  } = req.body;
  
  const created_at = new Date();

  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const userRes = await pool.query(`SELECT id FROM users WHERE username = $1`, [username]);
    const userId = userRes.rows[0]?.id;
    if (!userId) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' });
    }

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏ß‡πà‡∏≤‡∏á ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const slotCheckRes = await pool.query(
      `SELECT status FROM tray_inventory WHERE floor = $1 AND slot = $2`,
      [floor, slot]
    );

    if (slotCheckRes.rows.length > 0) {
      const trayInSlot = slotCheckRes.rows[0];
      if (trayInSlot.status === 'on_shelf' || trayInSlot.status === 'IN_STORAGE') {
        return res.status(409).json({ error: `‡∏ä‡πà‡∏≠‡∏á ${slot} ‡∏ö‡∏ô‡∏ä‡∏±‡πâ‡∏ô ${floor} ‡∏°‡∏µ‡∏ñ‡∏≤‡∏î‡∏ß‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß` });
      }
    }
    
    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Tray ID
    const isReturning = !!existing_tray_id;
    // ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ñ‡∏≤‡∏î‡∏Å‡∏•‡∏±‡∏ö
    const tray_id = isReturning ? existing_tray_id : await generateNextTrayId();
    
    // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    const description = isReturning 
        ? `‡∏™‡πà‡∏á‡∏ñ‡∏≤‡∏î ${veg_type} (ID: ${tray_id}) ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏±‡πâ‡∏ô ${floor}/${slot}`
        : `‡∏ß‡∏≤‡∏á‡∏ñ‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà ${veg_type} (ID: ${tray_id}) ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡πâ‡∏ô ${floor}/${slot}`;
    
    await logActivity({ 
        userId, activity: description, action_type: 'tray_inbound', category: '‡∏ß‡∏≤‡∏á‡∏ñ‡∏≤‡∏î',
        station, floor, slot, veg_type, description: notes || description 
    });
    
    // 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
    await pool.query(
      `INSERT INTO tray_history (tray_id, action_type, floor, slot, veg_type, username, station_id, created_at)
       VALUES ($1, 'inbound', $2, $3, $4, $5, $6, $7)`,
      [tray_id, floor, slot, veg_type, username, station, created_at]
    );

    // 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á Task ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Task Monitor ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    // ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await pool.query(
      `INSERT INTO task_monitor (
          tray_id, action_type, floor, slot, station_id, status, username, created_at,
          veg_type, plant_quantity, batch_id, seeding_date, notes
       )
       VALUES ($1, 'inbound', $2, $3, $4, 'pending', $5, $6, $7, $8, $9, $10, $11)`,
       [
           tray_id, floor, slot, station, username, created_at,
           veg_type, quantity, batch_id, seeding_date, notes
       ]
    );

    // 7. Trigger Flow ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Automation (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const stationId = parseInt(station);
    const state = stationStates[stationId];
    if (state.flowState === 'idle') {
      state.targetFloor = parseInt(floor);
      state.targetSlot = parseInt(slot);
      state.taskType = 'inbound';
      state.trayId = tray_id;
      state.isReturning = isReturning;
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ State Machine
      state.vegType = veg_type;
      state.username = username;
      state.plantQuantity = quantity;
      state.batchId = batch_id;
      state.seedingDate = seeding_date;
      state.notes = notes;
 state.stationId = stationId;
      state.flowState = 'inbound_start_lift_tray';
      console.log(`[Trigger] üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° flow INBOUND (${isReturning ? '‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö' : '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà'}) ‚Üí ‡∏ä‡∏±‡πâ‡∏ô ${floor}, ‡∏ä‡πà‡∏≠‡∏á ${slot}`);
      handleFlow(stationId);
      return res.json({ message: "‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" });
    } else {
      return res.status(409).json({ error: `‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà (${state.flowState})` });
    }
  } catch (err) {
    console.error('‚ùå Inbound Tray Error:', err.message);
    return res.status(500).send('Server error');
  }
});
app.post('/api/tray/outbound', async (req, res) => {
  const { username, station, floor, slot, reason, destination } = req.body;
  const created_at = new Date();

  try {
    const userRes = await pool.query(`SELECT id FROM users WHERE username = $1`, [username]);
    const userId = userRes.rows[0]?.id;
    if (!userId) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' });
    
    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ñ‡∏≤‡∏î‡∏à‡∏≤‡∏Å inventory
    const trayInfoRes = await pool.query('SELECT * FROM tray_inventory WHERE floor = $1 AND slot = $2', [floor, slot]);
    if (trayInfoRes.rows.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ñ‡∏≤‡∏î‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' });
    }
    const trayData = trayInfoRes.rows[0];

    // 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    const description = `‡∏ô‡∏≥‡∏ñ‡∏≤‡∏î ${trayData.veg_type} (ID: ${trayData.tray_id}) ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏±‡πâ‡∏ô ${floor}/${slot} (‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason})`;
    await logActivity({
        userId, activity: description, action_type: 'tray_outbound', category: '‡∏ô‡∏≥‡∏ñ‡∏≤‡∏î‡∏≠‡∏≠‡∏Å',
        station, floor, slot, veg_type: trayData.veg_type,
        description: `‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason}, ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á: ${destination || '-'}`
    });

    // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á tray_history
    await pool.query(
      `INSERT INTO tray_history (tray_id, action_type, floor, slot, veg_type, username, station_id, created_at)
       VALUES ($1, 'outbound', $2, $3, $4, $5, $6, $7)`,
      [trayData.tray_id, floor, slot, trayData.veg_type, username, station, created_at]
    );
    
    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Task ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° "‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡πÅ‡∏•‡∏∞ "‡πÄ‡∏û‡∏¥‡πà‡∏° reason"
    await pool.query(
      `INSERT INTO task_monitor (
          tray_id, action_type, floor, slot, station_id, status, username, created_at,
          veg_type, plant_quantity, batch_id, seeding_date, notes, reason
       )
       VALUES ($1, 'outbound', $2, $3, $4, 'pending', $5, $6, $7, $8, $9, $10, $11, $12)`,
       [
           trayData.tray_id, floor, slot, station, username, created_at,
           trayData.veg_type, trayData.plant_quantity, trayData.batch_id, trayData.seeding_date, trayData.notes,
           reason // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ reason ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å req.body ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
       ]
    );
    
    // 5. Trigger Flow (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const stationId = parseInt(station);
    const state = stationStates[stationId];
    if (state.flowState === 'idle') {
      state.targetFloor = parseInt(floor);
      state.targetSlot = parseInt(slot);
      state.taskType = 'outbound';
      state.trayId = trayData.tray_id;
      state.flowState = 'start';
       state.stationId = stationId;
      handleFlow(stationId);
      res.json({ message: "‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏≥‡∏ñ‡∏≤‡∏î‡∏≠‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
    } else {
      res.status(409).json({ error: `‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà` });
    }
  } catch (err) {
    console.error('‚ùå Outbound Tray Error:', err.message);
    res.status(500).send('Server error');
  }
});


app.post('/api/workstation/complete', async (req, res) => {
    const { tray_id, station_id } = req.body;
    try {
        // 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï task ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô success (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô dispose)
        await pool.query(
            `UPDATE task_monitor SET status = 'success', completed_at = NOW() WHERE station_id = $1 AND status = 'at_workstation'`,
            [station_id]
        );

        // 2. ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Flow State ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô idle (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô dispose)
        if (stationStates[station_id]) {
            stationStates[station_id].flowState = 'idle';
        }

        console.log(`‚úÖ [Workstation] Completed task for tray ${tray_id} without deleting from inventory.`);
        res.json({ message: '‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà Workstation ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (err) {
        console.error('‚ùå Complete Workstation Task Error:', err.message);
        res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
    }
});

// ‚úÖ‚úÖ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á TRAY ID ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö (T-001, T-002, ...) ‚öôÔ∏è
async function generateNextTrayId() {
  try {
    // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏•‡∏Ç ID ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á tray_inventory
    const result = await pool.query(`
      SELECT MAX(CAST(SUBSTRING(tray_id FROM 'T-([0-9]+)') AS INTEGER)) as max_id
      FROM tray_inventory
      WHERE tray_id ~ '^T-[0-9]+$'
    `);

    // 2. ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ñ‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ ID ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ) ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 1, ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏Ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏°‡∏≤‡∏ö‡∏ß‡∏Å 1
    const nextIdNumber = (result.rows[0]?.max_id || 0) + 1;

    // 3. ‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏°‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô 1 -> "001", 12 -> "012")
    const formattedId = `T-${String(nextIdNumber).padStart(3, '0')}`;
    
    console.log(`‚úÖ Generated New Tray ID: ${formattedId}`);
    return formattedId;

  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Tray ID:", err);
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ ID ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏°
    return `T-ERR-${Date.now().toString(36).toUpperCase()}`;
  }
}
app.post('/api/lift/move', async (req, res) => {
  const { userId, fromFloor, toFloor, station } = req.body;
  const description = `‡∏™‡∏±‡πà‡∏á‡∏•‡∏¥‡∏ü‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏ä‡∏±‡πâ‡∏ô ${fromFloor} ‡πÑ‡∏õ ${toFloor}`;

 const topic = `automation/station${station}/lift/command`;  // ‚úÖ ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ESP32
  const payload = JSON.stringify({
    action: "moveTo",
    floor: toFloor
  });

  try {
    mqttClient.publish(topic, payload);  // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á MQTT
    console.log("üì§ MQTT >>", topic, payload);

    await logActivity({
      userId,
      activity: description,
      action_type: 'lift',
      category: '‡∏•‡∏¥‡∏ü‡∏ï‡πå',
      station,
      floor: toFloor
    });

    res.json({ message: "‡∏•‡∏¥‡∏ü‡∏ï‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà" });
  } catch (err) {
    console.error('‚ùå Lift Error:', err.message);
    res.status(500).send('Server error');
  }
});

app.post('/api/lift/jog', (req, res) => {
  const { userId, station, action } = req.body;
  const topic = `automation/station${station}/lift/command`;
  const payload = JSON.stringify({ action }); // "jogUp" ‡∏´‡∏£‡∏∑‡∏≠ "jogDown"

  try {
    mqttClient.publish(topic, payload);
    console.log("üì§ MQTT Jog >>", topic, payload);

    logActivity({
      userId,
      activity: `‡∏™‡∏±‡πà‡∏á Jog ${action}`,
      action_type: 'lift',
      category: '‡∏•‡∏¥‡∏ü‡∏ï‡πå',
      station
    });

    res.json({ message: `Jog ${action} sent` });
  } catch (err) {
    console.error("‚ùå Jog Error:", err.message);
    res.status(500).send("Server error");
  }
});
app.post('/api/lift/stop', (req, res) => {
  const { userId, station } = req.body;
  const topic = `automation/station${station}/lift/command`;
  const payload = JSON.stringify({ action: "stop" });

  try {
    mqttClient.publish(topic, payload);
    console.log("üì§ MQTT STOP >>", topic);

    logActivity({
      userId,
      activity: `‡∏™‡∏±‡πà‡∏á STOP ‡∏•‡∏¥‡∏ü‡∏ï‡πå`,
      action_type: 'lift',
      category: '‡∏•‡∏¥‡∏ü‡∏ï‡πå',
      station
    });

    res.json({ message: "STOP command sent" });
  } catch (err) {
    console.error("‚ùå Stop Error:", err.message);
    res.status(500).send("Server error");
  }
});
app.post('/api/lift/emergency', (req, res) => {
  const { userId, station } = req.body;
  const topic = `automation/station${station}/lift/command`;
  const payload = JSON.stringify({ action: "emergency" });

  try {
    mqttClient.publish(topic, payload);
    console.log("üì§ MQTT EMERGENCY >>", topic);

    logActivity({
      userId,
      activity: `‡∏™‡πà‡∏á Emergency ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏¥‡∏ü‡∏ï‡πå`,
      action_type: 'lift',
      category: '‡∏•‡∏¥‡∏ü‡∏ï‡πå',
      station
    });

    res.json({ message: "EMERGENCY sent" });
  } catch (err) {
    console.error("‚ùå Emergency Error:", err.message);
    res.status(500).send("Server error");
  }
});
// ‚úÖ REST API ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏¥‡∏ü‡∏ï‡πå‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏° recovery
app.get('/api/lift/status', async (req, res) => {
  const station = parseInt(req.query.station) || 1;

  try {
    const result = await pool.query(
      `SELECT floor, moving, emergency, recovery,
              position_step AS step,
              "from" AS from,
              "to" AS to
       FROM lift_status
       WHERE station = $1
       LIMIT 1`,
      [station]
    );

    if (result.rows.length === 0) {
      return res.json({
        floor: 1,
        moving: false,
        emergency: false,
        recovery: false,
        step: 0,
        from: 1,
        to: 1
      });
    }

    res.json(result.rows[0]);
  } catch (err) {
    console.error("‚ùå Lift Status Error:", err.message);
    res.status(500).send("Server error");
  }
});






// ‚úÖ AGV
app.post('/api/agv/move', async (req, res) => {
  const { userId, from, to } = req.body;
  const description = `‡∏™‡∏±‡πà‡∏á AGV ‡∏ß‡∏¥‡πà‡∏á‡∏à‡∏≤‡∏Å ${from} ‡πÑ‡∏õ ${to}`;

  try {
   await logActivity({
  userId,
  activity: description,
  action_type: 'agv',  // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
  category: 'AGV',
  station: to
});


    res.json({ message: "AGV ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πà‡∏á" });
  } catch (err) {
    console.error('‚ùå AGV Error:', err.message);
    res.status(500).send('Server error');
  }
});

// ‚úÖ GET LOGS
app.get('/api/logs', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT logs.*, users.username 
      FROM logs 
      LEFT JOIN users ON logs.user_id = users.id 
      ORDER BY logs.timestamp DESC
    `);
    res.json(result.rows);
  } catch (err) {
    console.error("‚ùå Fetch logs error:", err.message);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• logs ‡πÑ‡∏î‡πâ" });
  }
});

// ‚úÖ START SERVER
const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Server is running at http://0.0.0.0:${PORT}`);
});

// ‚úÖ POST /api/log - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏™‡πà‡∏á Log ‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á
// ‚úÖ POST /api/log - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ frontend ‡∏™‡πà‡∏á log ‡∏°‡∏≤
app.post('/api/log', async (req, res) => {
  const {
    username,
    activity,
    action_type,
    category,
    station,
    floor,
    slot,
    veg_type,
    description
  } = req.body;

  console.log("üì• Logging from Frontend:", req.body);

  if (!username || !activity || !category || !action_type) {
    return res.status(400).json({ error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö' });
  }

  try {
    // ‚úÖ ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const userResult = await pool.query(
      "SELECT id FROM users WHERE username = $1",
      [username]
    );
    if (userResult.rows.length === 0) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ" });
    }

    const userId = userResult.rows[0].id;

    // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô "" ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏à‡∏∞ error)
    const parsedStation = station === "" ? null : station;
    const parsedFloor = floor === "" ? null : parseInt(floor);
    const parsedSlot = slot === "" ? null : parseInt(slot);
    const parsedVegType = veg_type === "" ? null : veg_type;

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á description ‡∏°‡∏≤‡πÄ‡∏•‡∏¢ ‡πÉ‡∏ä‡πâ activity ‡πÅ‡∏ó‡∏ô
    const parsedDescription = (!description || description === "") ? activity : description;

    // ‚úÖ insert
    await pool.query(
      `INSERT INTO logs (user_id, activity, action_type, category, station, floor, slot, veg_type, description)
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)`,
      [userId, activity, action_type, category, parsedStation, parsedFloor, parsedSlot, parsedVegType, parsedDescription]
    );

    res.json({ message: "Log saved" });
  } catch (err) {
    console.error("‚ùå POST /api/log error:", err.message);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡πÑ‡∏î‡πâ" });
  }
});

app.get('/api/tray-inventory', async (req, res) => {
  const stationId = req.query.station || '1'; 
  try {
    const result = await pool.query(
      'SELECT * FROM tray_inventory WHERE station_id = $1 ORDER BY floor, slot', 
      [stationId]
    );
    res.json(result.rows);
  } catch (err) {
    console.error(`Error fetching tray inventory for station ${stationId}:`, err.message); // ‡πÄ‡∏û‡∏¥‡πà‡∏° Log
    res.status(500).json({ error: err.message });
  }
});

app.post('/api/tray-inventory', async (req, res) => {
  const { tray_id, veg_type, floor, slot, username } = req.body; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° username
  try {
    await pool.query(`
      INSERT INTO tray_inventory (tray_id, veg_type, floor, slot, username)
      VALUES ($1, $2, $3, $4, $5)
    `, [tray_id, veg_type, floor, slot, username]); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° username ‡πÄ‡∏õ‡πá‡∏ô $5
    res.status(201).json({ message: 'Tray placed successfully' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});


app.delete('/api/tray-inventory/:tray_id', async (req, res) => {
  const tray_id = req.params.tray_id;
  try {
    await pool.query(`DELETE FROM tray_inventory WHERE tray_id = $1`, [tray_id]);
    res.json({ message: 'Tray removed' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

async function loadTrayInventory() {
  try {
    const res = await fetch('/api/tray-inventory');
    const data = await res.json();
    
    trayInventory = {}; // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
    data.forEach(tray => {
      const key = `${tray.floor}-${tray.slot}`;  // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏•‡∏¥‡∏Å
      trayInventory[key] = tray;
    });

    renderTrayGrid(); // ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  } catch (err) {
    console.error("‡πÇ‡∏´‡∏•‡∏î tray inventory ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err);
  }
}


// ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå index.js

// ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà] API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏≤‡∏î
app.put('/api/tray-inventory/:tray_id', async (req, res) => {
  const { tray_id } = req.params;
  // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const { veg_type, plant_quantity, batch_id, seeding_date, notes } = req.body;

  try {
    const result = await pool.query(
      `UPDATE tray_inventory 
       SET 
         veg_type = $1, 
         plant_quantity = $2, 
         batch_id = $3, 
         seeding_date = $4, 
         notes = $5
       WHERE tray_id = $6
       RETURNING *`,
      [veg_type, plant_quantity, batch_id, seeding_date, notes, tray_id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ñ‡∏≤‡∏î‡∏ô‡∏µ‡πâ' });
    }

    res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', tray: result.rows[0] });
  } catch (err) {
    console.error('‚ùå Update Tray Error:', err.message);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
});







app.get('/api/stats/summary', async (req, res) => {
  try {
    const station = parseInt(req.query.station);
    if (!station) return res.status(400).json({ error: "Missing station ID" });

    const inboundRes = await pool.query(`
      SELECT COUNT(*) FROM tray_history
      WHERE action_type = 'inbound' AND station_id = $1
    `, [station]);

    const outboundRes = await pool.query(`
      SELECT COUNT(*) FROM tray_history
      WHERE action_type = 'outbound' AND station_id = $1
    `, [station]);

    res.json({
      inbound: parseInt(inboundRes.rows[0].count),
      outbound: parseInt(outboundRes.rows[0].count)
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});


app.get('/api/stats/weekly', async (req, res) => {
  try {
    const station = parseInt(req.query.station);
    if (!station) return res.status(400).json({ error: "Missing station ID" });

    const result = await pool.query(`
      SELECT 
        TO_CHAR(created_at::date, 'DD/MM') AS date,
        SUM(CASE WHEN action_type = 'inbound' THEN 1 ELSE 0 END) AS inbound,
        SUM(CASE WHEN action_type = 'outbound' THEN 1 ELSE 0 END) AS outbound
      FROM tray_history
      WHERE created_at >= NOW() - INTERVAL '7 days'
        AND station_id = $1
      GROUP BY date
      ORDER BY MIN(created_at)
    `, [station]);

    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



app.get('/api/stats/hourly', async (req, res) => {
  try {
    const station = parseInt(req.query.station);
    if (!station) return res.status(400).json({ error: "Missing station ID" });

    const result = await pool.query(`
      SELECT 
        EXTRACT(HOUR FROM created_at) AS hour,
        SUM(CASE WHEN action_type = 'inbound' THEN 1 ELSE 0 END) AS inbound,
        SUM(CASE WHEN action_type = 'outbound' THEN 1 ELSE 0 END) AS outbound
      FROM tray_history
      WHERE created_at::date = CURRENT_DATE
        AND station_id = $1
      GROUP BY hour
      ORDER BY hour
    `, [station]);

    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



async function simulateTrayInbound(veg, currentStation, floor, slot) {
  try {
    const res = await fetch("http://localhost:3000/api/tray/inbound", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        userId: 1, // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô user ‡∏à‡∏£‡∏¥‡∏á
        veg_type: veg,
        station: currentStation,
        floor: parseInt(floor),
        slot: parseInt(slot)
      })
    });

    const result = await res.json();
    console.log("‚úÖ Inbound Result:", result);
  } catch (err) {
    console.error("‚ùå Inbound Error:", err.message);
  }
}

async function simulateTrayOutbound(veg, currentStation, floor, slot) {
  try {
    const res = await fetch("http://localhost:3000/api/tray/outbound", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        userId: 1,
        veg_type: veg,
        station: currentStation,
        floor: parseInt(floor),
        slot: parseInt(slot)
      })
    });

    const result = await res.json();
    console.log("‚úÖ Outbound Result:", result);
  } catch (err) {
    console.error("‚ùå Outbound Error:", err.message);
  }
}

const stationStates = {
  1: {
    flowState: 'idle',
    latestLiftStatus: {},
    latestAgvStatus: {},
    trayActionDone: false,
    targetFloor: null,
    targetSlot: null,
    taskType: null // 'inbound' ‡∏´‡∏£‡∏∑‡∏≠ 'outbound'
  }
};

// =================================================================
// üîµ MQTT Client Setup
// =================================================================
// MQTT Connect Event
mqttClient.on('connect', () => {
  console.log("‚úÖ MQTT Connected (Backend)");

  // ‚úÖ Subscribe Topic ‡∏Ç‡∏≠‡∏á Lift, AGV, ‡πÅ‡∏•‡∏∞ Tray
  mqttClient.subscribe("automation/station1/lift/status");
  mqttClient.subscribe('automation/station1/agv/status');
  mqttClient.subscribe("automation/station1/lift/tray_action_done");
});

// MQTT Message Handler (‡∏£‡∏ß‡∏° Logic ‡∏Ç‡∏≠‡∏á Lift, AGV, ‡πÅ‡∏•‡∏∞ Tray)
mqttClient.on('message', async (topic, message) => {
  const msg = message.toString();
  const stationId = 1; // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (station 1) ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const state = stationStates[stationId];
  if (!state) return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ state

  // üîΩ Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Lift Status
  if (topic === "automation/station1/lift/status") {
    try {
      const payload = JSON.parse(msg);
      const floor = parseInt(payload.floor) || 1;
      const moving = !!payload.moving;
      const emergency = !!payload.emergency;
      const recovery = !!payload.recovery;
      const step = parseInt(payload.step) || 0;

      state.latestLiftStatus = payload;

      await pool.query(`
        INSERT INTO lift_status (station, floor, moving, emergency, recovery, step, updated_at)
        VALUES (1, $1, $2, $3, $4, $5, NOW())
        ON CONFLICT (station) DO UPDATE
        SET floor = EXCLUDED.floor,
            moving = EXCLUDED.moving,
            emergency = EXCLUDED.emergency,
            recovery = EXCLUDED.recovery,
            step = EXCLUDED.step,
            updated_at = EXCLUDED.updated_at
      `, [floor, moving, emergency, recovery, step]);

      console.log("‚úÖ [DB] Updated lift_status ‚Üí Floor:", floor, "| Step:", step, "| Moving:", moving, "| EM:", emergency, "| Recovery:", recovery);
      handleFlow(stationId);

    } catch (err) {
      console.error("‚ùå Failed to update lift_status:", err.message);
      console.error("üî∏ Raw message:", msg);
    }
  }

  // üîΩ Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AGV Status
  if (topic === 'automation/station1/agv/status') {
    try {
      const payload = JSON.parse(msg);
      state.latestAgvStatus = payload; // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      console.log('[MQTT] üì° ‡∏£‡∏±‡∏ö AGV Status:', payload.status);

      // ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏•‡∏ö Logic ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DB ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handleFlow ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      handleFlow(stationId);

    } catch (err) {
      console.error('‚ùå Failed to parse AGV status MQTT payload:', err.message);
    }
  }

  // üîΩ Logic ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏≤‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
  if (topic === "automation/station1/lift/tray_action_done") {
    state.trayActionDone = true;
    console.log("[Tray] ‚úÖ ‡∏ñ‡∏≤‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");
    handleFlow(stationId);
  }
});


// =================================================================
// ‚öôÔ∏è API Endpoints
// =================================================================

// ‚úÖ GET Task Monitor (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö)
// ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå index.js (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î 879)

app.get('/api/task-monitor', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT tray_id, action_type, floor, slot, station_id, status, created_at, completed_at, username
      FROM task_monitor
      WHERE status IN ('pending', 'working', 'error', 'at_workstation') -- ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° 'at_workstation' ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
      ORDER BY created_at DESC
    `);
    res.json(result.rows);
  } catch (err) {
    console.error('‚ùå Error loading task monitor:', err.message);
    res.status(500).send('Server error');
  }
});

// ‚úÖ GET Task History (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
app.get('/api/task/history', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT tray_id, action_type, floor, slot, station_id, status, created_at, completed_at, username
      FROM task_monitor
      WHERE status = 'success'
      ORDER BY completed_at DESC
    `);
    res.json(result.rows);
  } catch (err) {
    console.error("‚ùå Fetch task history error:", err.message);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Task History ‡πÑ‡∏î‡πâ" });
  }
});

// ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ñ‡∏≤‡∏î (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Subquery ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ tray_history ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥)
app.get('/api/tray/history/:tray_id', async (req, res) => {
  const { tray_id } = req.params;
  try {
    const result = await pool.query(
      `SELECT 
         tm.*, 
         to_char(tm.created_at, 'DD/MM/YYYY HH24:MI:SS') as "timestamp_th",
         (SELECT MIN(created_at) FROM tray_history WHERE tray_id = tm.tray_id AND action_type = 'inbound') as "birth_time"
       FROM task_monitor tm
       WHERE tm.tray_id = $1 
       ORDER BY tm.created_at DESC`,
      [tray_id]
    );
    res.json(result.rows);
  } catch (err) {
    console.error(`Error fetching history for tray ${tray_id}:`, err.message);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥' });
  }
});





// ‚úÖ [Final Version] GET AGV's current status
// ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å Flow ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å (flowState) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
app.get('/api/agv/status', (req, res) => {
  const stationId = 1;
  const state = stationStates[stationId];
  
  if (!state) {
    return res.json({ status: 'unknown' });
  }

  let displayStatus;

  // ‡∏ñ‡πâ‡∏≤ Flow ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Flow ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
  if (state.flowState && state.flowState !== 'idle') {
    // ‡∏ú‡∏ô‡∏ß‡∏Å targetSlot ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    if ((state.flowState === 'wait_agv_at_slot' || state.flowState === 'start') && state.targetSlot) {
      displayStatus = `agv_moving_to_slot_${state.targetSlot}`;
    } else {
      displayStatus = state.flowState;
    }
  } else {
    // ‡∏ñ‡πâ‡∏≤ Flow ‡∏ß‡πà‡∏≤‡∏á (idle) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß AGV
    displayStatus = state.latestAgvStatus?.status || 'idle';
  }
  
  res.json({ status: displayStatus });
});
// =================================================================
// üîÑ Automation Flow Control
// =================================================================

// ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Task Monitor ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
async function updateTaskStatus(newStatus, stationId) {
    try {
        let result;
        if (newStatus === 'working') {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 'pending' ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'working'
            result = await pool.query(
                `UPDATE task_monitor SET status = 'working' WHERE station_id = $1 AND status = 'pending'`,
                [stationId]
            );
        } else if (newStatus === 'success') {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 'working' ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'success'
            result = await pool.query(
                `UPDATE task_monitor SET status = 'success', completed_at = NOW() WHERE station_id = $1 AND status = 'working'`,
                [stationId]
            );
             } else if (newStatus === 'at_workstation') { // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ
            result = await pool.query(
                `UPDATE task_monitor SET status = 'at_workstation' WHERE station_id = $1 AND status = 'working'`,
                [stationId]
            );
        } else if (newStatus === 'error') {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏≠‡∏¢‡∏π‡πà ('pending' ‡∏´‡∏£‡∏∑‡∏≠ 'working') ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'error'
            result = await pool.query(
                `UPDATE task_monitor SET status = 'error' WHERE station_id = $1 AND status IN ('pending', 'working')`,
                [stationId]
            );
        }

        if (result && result.rowCount > 0) {
            console.log(`‚úÖ [DB] Task Monitor for Station ${stationId} updated to -> ${newStatus.toUpperCase()}`);
        }
    } catch (err) {
        console.error(`‚ùå Failed to update task_monitor to ${newStatus}:`, err.message);
    }
}


function logState(stationId, msg) {
  console.log(`\x1b[36m[Flow] Station ${stationId} ‚Üí ${msg}\x1b[0m`);
}
// ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå index.js

async function handleFlow(stationId) {
  const state = stationStates[stationId];
  if (!state) return;

  const lift = state.latestLiftStatus;
  const agv = state.latestAgvStatus;

  if (agv?.status === 'error') {
      logState(stationId, `[ERROR] AGV ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î! ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î Flow ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Task`);
      await updateTaskStatus('error', stationId);
      state.flowState = 'idle';
      return;
  }
  
  if (state.flowState === 'start' || state.flowState === 'inbound_start_lift_tray') {
      await updateTaskStatus('working', stationId);
  }
  
  if (state.flowState === 'idle') return;

  const getGoToSlotCommand = (slot) => slot > 0 ? `go_slot${slot}` : null;

  switch (state.flowState) {
    case 'inbound_start_lift_tray':
      logState(stationId, `[INBOUND] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‚Üí ‡∏™‡∏±‡πà‡∏á AGV ‡∏¢‡∏Å‡∏ñ‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô (pickup_tray)`);
      mqttClient.publish(`automation/station1/tray/command`, JSON.stringify({ command: 'pickup_tray' }));
      state.flowState = 'inbound_wait_for_tray_lift';
      break;

    case 'inbound_wait_for_tray_lift':
      if (state.trayActionDone) {
        logState(stationId, `[INBOUND] ‡∏¢‡∏Å‡∏ñ‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡∏£‡∏≠ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
        await delay(500);
        state.trayActionDone = false;
        logState(stationId, `[INBOUND] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà`);
        if (state.targetFloor === 2) {
          logState(stationId, '‡∏ä‡∏±‡πâ‡∏ô 2 ‚Üí ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏•‡∏¥‡∏ü‡∏ï‡πå ‚Üí ‡πÑ‡∏õ slot ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ');
          mqttClient.publish(`automation/station1/agv/command`, JSON.stringify({ command: getGoToSlotCommand(state.targetSlot) }));
          state.flowState = 'wait_agv_at_slot';
        } else {
          logState(stationId, '‡∏ä‡∏±‡πâ‡∏ô ‚â† 2 ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏•‡∏¥‡∏ü‡∏ï‡πå ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AGV ‡πÑ‡∏õ lift');
          mqttClient.publish(`automation/station1/agv/command`, JSON.stringify({ command: 'go_lift' }));
          state.flowState = 'wait_agv_at_lift';
        }
      }
      break;

    case 'start':
      logState(stationId, `[OUTBOUND] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ Slot`);
      if (state.targetFloor === 2) {
        mqttClient.publish(`automation/station1/agv/command`, JSON.stringify({ command: getGoToSlotCommand(state.targetSlot) }));
        state.flowState = 'wait_agv_at_slot';
      } else {
        mqttClient.publish(`automation/station1/agv/command`, JSON.stringify({ command: 'go_lift' }));
        state.flowState = 'wait_agv_at_lift';
      }
      break;

    case 'wait_agv_at_lift':
      if (agv?.location === 'at_lift') {
        logState(stationId, 'AGV ‡∏ñ‡∏∂‡∏á Lift ‚Üí ‡∏£‡∏≠ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£');
        await delay(500);
        logState(stationId, 'AGV ‡∏ñ‡∏∂‡∏á Lift ‚Üí ‡∏¢‡∏Å‡∏•‡∏¥‡∏ü‡∏ï‡πå‡∏Ç‡∏∂‡πâ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢');
        mqttClient.publish(`automation/station1/lift/command`, JSON.stringify({ action: 'moveTo', floor: state.targetFloor }));
        state.flowState = 'lift_moving_up';
      }
      break;

    case 'lift_moving_up':
      if (!lift?.moving && lift?.floor === state.targetFloor) {
        logState(stationId, `Lift ‡∏ñ‡∏∂‡∏á‡∏ä‡∏±‡πâ‡∏ô ${state.targetFloor} ‚Üí ‡∏£‡∏≠ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
        await delay(500);
        logState(stationId, `Lift ‡∏ñ‡∏∂‡∏á‡∏ä‡∏±‡πâ‡∏ô ${state.targetFloor} ‚Üí AGV ‡πÑ‡∏õ‡∏¢‡∏±‡∏á slot`);
        mqttClient.publish(`automation/station1/agv/command`, JSON.stringify({ command: getGoToSlotCommand(state.targetSlot) }));
        state.flowState = 'wait_agv_at_slot';
      }
      break;

    case 'wait_agv_at_slot':
      if (agv?.location === 'at_slot') {
        logState(stationId, `AGV ‡∏ñ‡∏∂‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏£‡∏≠ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£`);
        await delay(500);
        const trayCommand = (state.taskType === 'inbound') ? 'place_tray' : 'pickup_tray';
        logState(stationId, `AGV ‡∏ñ‡∏∂‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏™‡∏±‡πà‡∏á ${trayCommand}`);
        mqttClient.publish(`automation/station1/tray/command`, JSON.stringify({ command: trayCommand }));
        state.flowState = 'wait_tray_action_done';
      }
      break;

case 'wait_tray_action_done':
  if (state.trayActionDone) {
    logState(stationId, '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ñ‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Inventory ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!');

    try {
      if (state.taskType === 'inbound') {
        
        if (state.isReturning) {
          // UPDATE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
          await pool.query(
            `UPDATE tray_inventory 
             SET 
               floor = $1, slot = $2, status = 'on_shelf', 
               veg_type = $3, plant_quantity = $4, batch_id = $5, 
               seeding_date = $6, notes = $7, username = $8,
               station_id = $9  -- ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏û‡∏¥‡πà‡∏° station_id
             WHERE tray_id = $10`, // ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô $10
            [
              state.targetFloor, state.targetSlot, state.vegType,
              state.plantQuantity, state.batchId, state.seedingDate,
              state.notes, state.username, state.stationId, // ‚úÖ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏û‡∏¥‡πà‡∏° state.stationId
              state.trayId
            ]
          );
          console.log(`‚úÖ [DB IMMEDIATE] Inbound: Updated tray ${state.trayId} to new location (age preserved).`);

        } else {
          // INSERT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà
        await pool.query(
  `INSERT INTO tray_inventory (tray_id, veg_type, floor, slot, username, time_in, plant_quantity, batch_id, seeding_date, notes, status, station_id) 
   VALUES ($1, $2, $3, $4, $5, NOW(), $6, $7, $8, $9, 'on_shelf', $10)`,
  [
    state.trayId, state.vegType, state.targetFloor, state.targetSlot,
    state.username, state.plantQuantity, state.batchId,
    state.seedingDate, state.notes, state.stationId // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state.stationId
  ]
);
          console.log(`‚úÖ [DB IMMEDIATE] Inbound: Added new tray ${state.trayId}.`);
        }

      } else if (state.taskType === 'outbound') {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô AT_WORKSTATION ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å RGV ‡∏´‡∏¢‡∏¥‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        await pool.query(
            `UPDATE tray_inventory SET status = 'AT_WORKSTATION' WHERE tray_id = $1`,
            [state.trayId]
        );
        console.log(`[Status Update] Tray ${state.trayId} status changed to AT_WORKSTATION.`);
        console.log(`‚úÖ [Flow] Outbound: ‡∏´‡∏¢‡∏¥‡∏ö‡∏ñ‡∏≤‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö`);
      }
      
    } catch (dbError) {
      console.error("‚ùå [DB IMMEDIATE] Error during DB operation:", dbError.message);
    }

    // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô case ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ---
    await delay(500);
    logState(stationId, '‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö');
    state.trayActionDone = false; 

    if (state.targetFloor === 2) {
      logState(stationId, '‡∏ä‡∏±‡πâ‡∏ô 2 ‚Üí AGV ‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏¢');
      mqttClient.publish(`automation/station1/agv/command`, JSON.stringify({ command: 'go_home' }));
      state.flowState = 'wait_agv_home';
    } else {
      logState(stationId, '‡∏ä‡∏±‡πâ‡∏ô ‚â† 2 ‚Üí AGV ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà lift');
      mqttClient.publish(`automation/station1/agv/command`, JSON.stringify({ command: 'go_lift' }));
      state.flowState = 'wait_agv_return_to_lift';
    }
  }
  break;

    case 'wait_agv_return_to_lift':
      if (agv?.location === 'at_lift') {
        logState(stationId, 'AGV ‡∏Å‡∏•‡∏±‡∏ö‡∏ñ‡∏∂‡∏á Lift ‚Üí ‡∏£‡∏≠ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ');
        await delay(500);
        logState(stationId, 'AGV ‡∏Å‡∏•‡∏±‡∏ö‡∏ñ‡∏∂‡∏á Lift ‚Üí ‡∏™‡∏±‡πà‡∏á‡∏•‡∏¥‡∏ü‡∏ï‡πå‡∏•‡∏á‡∏ä‡∏±‡πâ‡∏ô 2');
        mqttClient.publish(`automation/station1/lift/command`, JSON.stringify({ action: 'moveTo', floor: 2 }));
        state.flowState = 'lift_moving_down';
      }
      break;

    case 'lift_moving_down':
      if (!lift?.moving && lift?.floor === 2) {
        logState(stationId, 'Lift ‡∏•‡∏á‡∏ñ‡∏∂‡∏á‡∏ä‡∏±‡πâ‡∏ô 2 ‚Üí ‡∏£‡∏≠ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ');
        await delay(500);
        logState(stationId, 'Lift ‡∏•‡∏á‡∏ñ‡∏∂‡∏á‡∏ä‡∏±‡πâ‡∏ô 2 ‚Üí AGV ‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô');
        mqttClient.publish(`automation/station1/agv/command`, JSON.stringify({ command: 'go_home' }));
        state.flowState = 'wait_agv_home';
      }
      break;

    case 'wait_agv_home':
      if (agv?.location === 'home' || agv?.location === 'at_home') {
        logState(stationId, 'AGV ‡∏ñ‡∏∂‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏£‡∏≠ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ');
        await delay(500);
        if (state.taskType === 'outbound') {
          logState(stationId, '[OUTBOUND] AGV ‡∏ñ‡∏∂‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏™‡∏±‡πà‡∏á‡∏ß‡∏≤‡∏á‡∏ñ‡∏≤‡∏î (place_tray)');
          mqttClient.publish(`automation/station1/tray/command`, JSON.stringify({ command: 'place_tray' }));
          state.flowState = 'outbound_wait_for_final_place';
        } else {
          logState(stationId, '[INBOUND] AGV ‡∏Å‡∏•‡∏±‡∏ö‡∏ñ‡∏∂‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚Üí Flow ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');
          state.flowState = 'done';
          await handleFlow(stationId);
        }
      }
      break;

    // ‡πÉ‡∏ô handleFlow, case 'outbound_wait_for_final_place'
case 'outbound_wait_for_final_place':
  if (state.trayActionDone) {
    logState(stationId, '[OUTBOUND] ‡∏ß‡∏≤‡∏á‡∏ñ‡∏≤‡∏î‡∏ó‡∏µ‡πà Home ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    state.trayActionDone = false; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ò‡∏á

    // ‚ùå ‡πÄ‡∏î‡∏¥‡∏°: state.flowState = 'done';
    // ‚úÖ ‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Task ‡πÅ‡∏•‡∏∞ Flow
    logState(stationId, '[WORKSTATION] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏≠‡∏ó‡∏µ‡πà Workstation"');
    await updateTaskStatus('at_workstation', stationId); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Task ‡πÉ‡∏ô DB

    // Reset state ‡∏Ç‡∏≠‡∏á flow ‡πÅ‡∏ï‡πà "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á" ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô idle
    // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà Workstation
    state.taskType = null;
    state.targetFloor = null;
    state.targetSlot = null;
    // ... ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state.flowState

    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handleFlow(stationId) ‡∏ï‡πà‡∏≠ ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ flow ‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
  }
  break;
    case 'done':
      // ‚ùå ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Inventory ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      logState(stationId, 'Flow ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Task ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô Idle');
      await updateTaskStatus('success', stationId);

      // Reset state variables
      state.flowState = 'idle';
      state.taskType = null;
      state.targetFloor = null;
      state.targetSlot = null;
      state.vegType = null;
      state.username = null;
      state.trayId = null;
      break;
  }
}




// ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà] API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ñ‡∏≤‡∏î‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà Workstation ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
app.get('/api/workstation/current', async (req, res) => {
    const { station } = req.query;
    try {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° reason ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô SELECT statement
        const result = await pool.query(
            `SELECT 
                tray_id, floor, slot, station_id,
                veg_type, plant_quantity, batch_id, seeding_date, notes,
                reason
             FROM task_monitor
             WHERE station_id = $1 AND status = 'at_workstation'
             LIMIT 1`,
            [station || 1]
        );
        res.json(result.rows[0] || null);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});


app.post('/api/workstation/dispose', async (req, res) => {
    const { tray_id, station_id } = req.body;
    try {
        // ‚úÖ 1. [‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ] ‡∏•‡∏ö‡∏ñ‡∏≤‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å inventory
        await pool.query(
            `DELETE FROM tray_inventory WHERE tray_id = $1`,
            [tray_id]
        );
        console.log(`üóëÔ∏è [Workstation] Deleted tray ${tray_id} from inventory.`);

        // 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï task ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô success (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
        await pool.query(
            `UPDATE task_monitor SET status = 'success', completed_at = NOW() WHERE station_id = $1 AND status = 'at_workstation'`,
            [station_id]
        );

        // 3. ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Flow State ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô idle (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
        if (stationStates[station_id]) {
            stationStates[station_id].flowState = 'idle';
        }

        res.json({ message: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' });
    } catch (err) {
        console.error('‚ùå Dispose Tray Error:', err.message); // Log error
        res.status(500).json({ error: err.message });
    }
});

// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á" ‡∏à‡∏∞‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏ß‡πà‡∏≤ ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
// ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Task Inbound ‡πÉ‡∏´‡∏°‡πà ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ

















// ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà register ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
let cameras = {};

// ‚úÖ ‡∏£‡∏±‡∏ö register ‡∏Å‡∏•‡πâ‡∏≠‡∏á
app.post('/api/camera/register', (req, res) => {
  const { camera_id, ip } = req.body;
  if (!camera_id || !ip) {
    return res.status(400).json({ error: "camera_id ‡πÅ‡∏•‡∏∞ ip ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á" });
  }

  cameras[camera_id] = { ip, registered_at: new Date() };
  console.log(`üì∏ Camera Registered: ${camera_id} ‚Üí ${ip}`);
  res.json({ message: "Camera registered" });
});

// ‚úÖ ‡∏î‡∏∂‡∏á stream ‡∏Å‡∏•‡πâ‡∏≠‡∏á ‚Üí stream pass-through ‡πÅ‡∏ö‡∏ö raw 100%
const net = require('net');
const { URL } = require('url');

app.get('/api/camera/stream/:camera_id', (req, res) => {
  const camera_id = req.params.camera_id;
  const camera = cameras[camera_id];

  if (!camera) {
    console.error('‚ùå Camera not found:', camera_id);
    return res.status(404).send('Camera not found');
  }

  const targetUrl = `http://${camera.ip}/stream`;
  console.log(`üì° Proxy streaming camera: ${camera_id} ‚Üí ${targetUrl}`);

  const url = new URL(targetUrl);
  const socket = net.connect(url.port || 80, url.hostname, () => {
    socket.write(`GET ${url.pathname} HTTP/1.1\r\n`);
    socket.write(`Host: ${url.hostname}\r\n`);
    socket.write(`Connection: close\r\n`);  // ‚úÖ ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö stream
    socket.write(`\r\n`);
  });

  let headerParsed = false;
  let headerBuffer = Buffer.alloc(0);

  socket.on('data', (chunk) => {
    if (!headerParsed) {
      headerBuffer = Buffer.concat([headerBuffer, chunk]);
      const headerEnd = headerBuffer.indexOf('\r\n\r\n');
      if (headerEnd !== -1) {
        const headers = headerBuffer.slice(0, headerEnd).toString();
        const body = headerBuffer.slice(headerEnd + 4);

        // ‚úÖ ‡∏î‡∏∂‡∏á Content-Type ‡∏à‡∏≤‡∏Å header ‡∏à‡∏£‡∏¥‡∏á
        let contentType = 'multipart/x-mixed-replace; boundary=frame';
        const match = headers.match(/Content-Type:\s*(.+)/i);
        if (match) {
          contentType = match[1].replace('--boundarydonotcross', 'frame').trim();
        }

        res.writeHead(200, { 'Content-Type': contentType });
        res.write(body);
        headerParsed = true;
      }
    } else {
      res.write(chunk);
    }
  });

  socket.on('end', () => {
    console.log(`‚úÖ Stream ended: ${camera_id}`);
    res.end();
  });

  socket.on('error', (err) => {
    console.error('‚ùå Stream socket error:', err);
    if (!res.headersSent) res.status(500).send('Proxy failed');
    else res.end();
  });

  // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ client ‡∏Å‡∏î‡∏õ‡∏¥‡∏î tab ‡πÉ‡∏´‡πâ terminate socket ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  req.on('close', () => {
    console.log(`‚ö†Ô∏è Client closed connection: ${camera_id}`);
    socket.destroy();
  });
});
// ‚úÖ MANUAL AGV COMMAND (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏¢‡∏¥‡∏á‡∏ï‡∏£‡∏á agv/command)
app.post('/api/agv/manual', (req, res) => {
  const { userId, station, command } = req.body;

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô topic ‡πÑ‡∏õ‡∏¢‡∏¥‡∏á‡∏ï‡∏£‡∏á AGV Command
  const topic = `automation/station${station}/agv/command`;

  // payload ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON { command: "xxx" }
  const payload = JSON.stringify({ command });

  try {
    mqttClient.publish(topic, payload);
    console.log("üì§ MQTT AGV Manual >>", topic, payload);
    res.json({ message: "AGV Manual command sent" });
  } catch (err) {
    console.error("‚ùå AGV Manual Error:", err.message);
    res.status(500).send("Server error");
  }
});

app.post('/api/tray/manual', (req, res) => {
  const { userId, station, command } = req.body;
  const topic = `automation/station${station}/tray/command`;
  const payload = JSON.stringify({ command });

  try {
    mqttClient.publish(topic, payload);
    console.log("üì§ MQTT Tray Manual >>", topic, payload);
    res.json({ message: "Tray Manual command sent" });
  } catch (err) {
    console.error("‚ùå Tray Manual Error:", err.message);
    res.status(500).send("Server error");
  }
});


// ‚úÖ [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà] API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Summary Cards ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Overview
app.get('/api/overview/summary-cards', async (req, res) => {
  try {
    const stationId = req.query.station || '1';

    // 1. Inbound/Outbound ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    const todayStatsRes = await pool.query(
      `SELECT
         SUM(CASE WHEN action_type = 'inbound' THEN 1 ELSE 0 END) as today_inbound,
         SUM(CASE WHEN action_type = 'outbound' THEN 1 ELSE 0 END) as today_outbound
       FROM tray_history
       WHERE station_id = $1 AND created_at >= CURRENT_DATE`,
      [stationId]
    );

    // 2. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalTraysRes = await pool.query(
      `SELECT COUNT(*) FROM tray_inventory WHERE station_id = $1 AND status = 'on_shelf'`,
      [stationId]
    );
    
    // 3. % ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 100%)
    const onTimePercentage = 100;

    res.json({
      today_inbound: parseInt(todayStatsRes.rows[0].today_inbound) || 0,
      today_outbound: parseInt(todayStatsRes.rows[0].today_outbound) || 0,
      total_trays: parseInt(totalTraysRes.rows[0].count) || 0,
      ontime_percentage: onTimePercentage 
    });

  } catch (err) {
    console.error("‚ùå Error fetching summary cards data:", err.message);
    res.status(500).json({ error: 'Server error' });
  }
});



