const { Pool } = require('pg');

const pool = new Pool({
  host: '192.168.20.50',
  port: 5432,
  user: 'postgres',
  password: '123456',
  database: 'pfal'
});

async function createDemoHarvestData() {
  try {
    console.log('üå± ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß...');
    
    const demoPlans = [
      {
        plan_id: 'DEMO-001',
        vegetable_type: '‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î‡∏´‡∏≠‡∏°',
        plant_date: '2025-01-15',
        harvest_date: '2025-02-15', // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡πá‡∏ö 15 ‡∏Å.‡∏û.
        actual_harvest_date: '2025-02-10', // ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏£‡∏¥‡∏á 10 ‡∏Å.‡∏û. (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏ß‡∏±‡∏ô)
        plant_count: 120,
        status: 'completed',
        completed_at: '2025-02-10 14:30:00',
        harvest_notes: '‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏±‡∏Å‡πÇ‡∏ï‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏≤‡∏î'
      },
      {
        plan_id: 'DEMO-002', 
        vegetable_type: '‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®‡πÄ‡∏ä‡∏≠‡∏£‡∏µ‡πà',
        plant_date: '2025-01-10',
        harvest_date: '2025-02-20', // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡πá‡∏ö 20 ‡∏Å.‡∏û.
        actual_harvest_date: '2025-02-17', // ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏£‡∏¥‡∏á 17 ‡∏Å.‡∏û. (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏ß‡∏±‡∏ô)
        plant_count: 80,
        status: 'completed',
        completed_at: '2025-02-17 09:15:00',
        harvest_notes: '‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏™‡∏∏‡∏Å‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î'
      },
      {
        plan_id: 'DEMO-003',
        vegetable_type: '‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó',
        plant_date: '2025-01-05',
        harvest_date: '2025-02-25', // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡πá‡∏ö 25 ‡∏Å.‡∏û.
        actual_harvest_date: '2025-02-18', // ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏£‡∏¥‡∏á 18 ‡∏Å.‡∏û. (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏ß‡∏±‡∏ô) 
        plant_count: 200,
        status: 'completed',
        completed_at: '2025-02-18 16:45:00',
        harvest_notes: '‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó‡πÇ‡∏ï‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡∏õ‡∏≤‡∏Å'
      },
      {
        plan_id: 'DEMO-004',
        vegetable_type: '‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á‡∏à‡∏µ‡∏ô',
        plant_date: '2025-01-20',
        harvest_date: '2025-02-10', // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡πá‡∏ö 10 ‡∏Å.‡∏û.
        actual_harvest_date: '2025-02-08', // ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏£‡∏¥‡∏á 8 ‡∏Å.‡∏û. (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ß‡∏±‡∏ô)
        plant_count: 150,
        status: 'completed', 
        completed_at: '2025-02-08 11:20:00',
        harvest_notes: '‡πÉ‡∏ö‡∏≠‡πà‡∏≠‡∏ô‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û'
      },
      {
        plan_id: 'DEMO-005',
        vegetable_type: '‡πÄ‡∏Ñ‡∏•',
        plant_date: '2025-01-12',
        harvest_date: '2025-02-12', // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡πá‡∏ö 12 ‡∏Å.‡∏û.
        actual_harvest_date: '2025-02-12', // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô)
        plant_count: 90,
        status: 'completed',
        completed_at: '2025-02-12 13:00:00',
        harvest_notes: '‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏≠‡∏î‡∏µ'
      }
    ];

    console.log('\nüìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°...');
    
    for (const plan of demoPlans) {
      const result = await pool.query(`
        INSERT INTO planting_plans (
          plan_id, vegetable_type, plant_date, harvest_date, actual_harvest_date,
          plant_count, status, completed_at, harvest_notes, 
          created_at, updated_at, created_by, completed_by
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
        RETURNING id, plan_id, vegetable_type
      `, [
        plan.plan_id, 
        plan.vegetable_type, 
        plan.plant_date, 
        plan.harvest_date,
        plan.actual_harvest_date,
        plan.plant_count, 
        plan.status, 
        plan.completed_at,
        plan.harvest_notes,
        new Date(), 
        new Date(),
        'demo_user',
        'demo_harvester'
      ]);

      const planData = result.rows[0];
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      if (plan.actual_harvest_date !== plan.harvest_date) {
        const actualDate = new Date(plan.actual_harvest_date);
        const plannedDate = new Date(plan.harvest_date);
        const daysEarly = Math.ceil((plannedDate - actualDate) / (1000 * 60 * 60 * 24));
        
        if (daysEarly > 0) {
          console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: ${planData.vegetable_type} (‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î ${daysEarly} ‡∏ß‡∏±‡∏ô)`);
        } else {
          console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: ${planData.vegetable_type} (‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î)`);
        }
      } else {
        console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: ${planData.vegetable_type} (‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î)`);
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\nüìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á...');
    const checkResult = await pool.query(`
      SELECT 
        plan_id, vegetable_type, 
        harvest_date, actual_harvest_date,
        CASE 
          WHEN actual_harvest_date < harvest_date 
          THEN harvest_date - actual_harvest_date 
          ELSE 0 
        END as days_early,
        harvest_notes
      FROM planting_plans 
      WHERE plan_id LIKE 'DEMO-%'
      ORDER BY plan_id
    `);

    console.log('\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:');
    checkResult.rows.forEach(row => {
      const earlyText = row.days_early > 0 ? `‚ö†Ô∏è ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ ${row.days_early} ‡∏ß‡∏±‡∏ô` : '‚úÖ ‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤';
      console.log(`- ${row.plan_id}: ${row.vegetable_type} ${earlyText}`);
      console.log(`  ‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${row.harvest_date.toISOString().split('T')[0]} | ‡∏à‡∏£‡∏¥‡∏á: ${row.actual_harvest_date.toISOString().split('T')[0]}`);
    });

    console.log('\nüéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏õ‡∏î‡∏π‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß');
    
  } catch (err) {
    console.error('‚ùå Error:', err.message);
  } finally {
    await pool.end();
  }
}

createDemoHarvestData();