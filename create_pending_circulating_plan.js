const pool = require('./db');

async function createPendingPlans() {
  try {
    console.log('=== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô ===\n');

    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const today = new Date();
    const plantDate = new Date(today);
    plantDate.setDate(plantDate.getDate() + 3); // ‡∏õ‡∏•‡∏π‡∏Å‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 3 ‡∏ß‡∏±‡∏ô

    const harvestDate = new Date(plantDate);
    harvestDate.setDate(harvestDate.getDate() + 28); // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏•‡∏π‡∏Å 28 ‡∏ß‡∏±‡∏ô

    const waterCloseDate = new Date(harvestDate);
    waterCloseDate.setDate(waterCloseDate.getDate() - 2); // ‡∏õ‡∏¥‡∏î‡∏ô‡πâ‡∏≥ 2 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß

    console.log(`üìÖ ‡∏ß‡∏±‡∏ô‡∏õ‡∏•‡∏π‡∏Å: ${plantDate.toISOString().split('T')[0]}`);
    console.log(`üåæ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß: ${harvestDate.toISOString().split('T')[0]}`);
    console.log(`üíß ‡∏ß‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏ô‡πâ‡∏≥: ${waterCloseDate.toISOString().split('T')[0]}\n`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å 3 ‡πÅ‡∏ú‡∏ô
    const vegetables = [
      { name: '‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î‡∏´‡∏≠‡∏°', count: 50, ec: 1.5, ph: 6.0 },
      { name: '‡∏Ñ‡∏≠‡∏™‡πÄ‡∏•‡∏ï‡∏∏‡πä‡∏Å', count: 40, ec: 1.8, ph: 5.8 },
      { name: '‡∏ú‡∏±‡∏Å‡∏™‡∏•‡∏±‡∏î', count: 60, ec: 1.6, ph: 6.2 }
    ];

    let createdCount = 0;
    for (const veg of vegetables) {
      const planId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

      const result = await pool.query(`
        INSERT INTO planting_plans (
          plan_id, vegetable_type, plant_date, harvest_date,
          plant_count, status, water_system, water_close_date,
          ec_value, ph_value, station_id,
          created_by, created_at
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, NOW())
        RETURNING id, plan_id, vegetable_type
      `, [
        planId,
        veg.name,
        plantDate,
        harvestDate,
        veg.count,
        'pending',
        'circulating',
        waterCloseDate,
        veg.ec,
        veg.ph,
        1,
        'Admin'
      ]);

      createdCount++;
      const created = result.rows[0];
      console.log(`‚úÖ ${createdCount}. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å: ${created.vegetable_type}`);
      console.log(`   Plan ID: ${created.plan_id}`);
      console.log(`   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${veg.count} ‡∏ï‡πâ‡∏ô`);
      console.log(`   EC: ${veg.ec} | pH: ${veg.ph}`);
      console.log(`   ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡πâ‡∏≥: ‡∏ô‡πâ‡∏≥‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô (circulating)`);
      console.log(`   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: pending\n`);
    }

    console.log(`\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${createdCount} ‡πÅ‡∏ú‡∏ô`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
    const checkResult = await pool.query(`
      SELECT
        id, plan_id, vegetable_type, plant_date, harvest_date,
        water_system, water_close_date, ec_value, ph_value, status
      FROM planting_plans
      WHERE status = 'pending' AND water_system = 'circulating'
      ORDER BY created_at DESC
      LIMIT 5
    `);

    console.log('\n=== ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ===');
    console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${checkResult.rows.length} ‡πÅ‡∏ú‡∏ô\n`);

    checkResult.rows.forEach((plan, index) => {
      console.log(`${index + 1}. ${plan.vegetable_type} (${plan.plan_id})`);
      console.log(`   üìÖ ‡∏ß‡∏±‡∏ô‡∏õ‡∏•‡∏π‡∏Å: ${plan.plant_date?.toISOString().split('T')[0]}`);
      console.log(`   üåæ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß: ${plan.harvest_date?.toISOString().split('T')[0]}`);
      console.log(`   üíß ‡∏ß‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏ô‡πâ‡∏≥: ${plan.water_close_date?.toISOString().split('T')[0]}`);
      console.log(`   ‚ö° EC: ${plan.ec_value} | üí¶ pH: ${plan.ph_value}`);
      console.log(`   üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${plan.status}\n`);
    });

    console.log('üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ "Planting Plan > ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥" ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß');

  } catch (err) {
    console.error('‚ùå Error:', err.message);
    console.error(err.stack);
  } finally {
    console.log('\nüîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    process.exit(0);
  }
}

createPendingPlans();
